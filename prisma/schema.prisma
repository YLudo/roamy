generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String          @id @default(cuid())
  name                String          @unique
  email               String          @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  accounts            Account[]
  travels             Travel[]
  participatedTravels Participant[]
  polls               Poll[]
  votes               Vote[]
  plaidItems          PlaidItem[]
  activateTokens      ActivateToken[]
  sentInvitations     Invitation[]    @relation("sentInvitations")
  receivedInvitations Invitation[]    @relation("receivedInvitations")
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model ActivateToken {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  activatedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Travel {
  id           String        @id @default(cuid())
  title        String
  startDate    String?
  endDate      String?
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  participants Participant[]
  expenses     Expense[]
  activities   Activity[]
  documents    Document[]
  polls        Poll[]
  invitations  Invitation[]
  messages     Message[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Participant {
  id        String   @id @default(cuid())
  userId    String
  travelId  String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  travel    Travel   @relation(fields: [travelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, travelId])
}

model Expense {
  id        String          @id @default(cuid())
  title     String
  category  ExpenseCategory
  amount    Float
  date      DateTime?
  travelId  String
  travel    Travel          @relation(fields: [travelId], references: [id], onDelete: Cascade)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum ExpenseCategory {
  ACCOMODATION
  MEAL
  ACTIVITY
  TRANSPORT
  OTHER
}

model Activity {
  id          String    @id @default(cuid())
  title       String
  description String?
  address     String?
  date        DateTime?
  travelId    String
  travel      Travel    @relation(fields: [travelId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  url         String
  travelId    String
  travel      Travel   @relation(fields: [travelId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Poll {
  id          String       @id @default(cuid())
  title       String
  description String?
  hasVoted    Boolean      @default(false)
  pollOptions PollOption[]
  travelId    String
  travel      Travel       @relation(fields: [travelId], references: [id], onDelete: Cascade)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model PollOption {
  id        String   @id @default(cuid())
  text      String
  votes     Vote[]
  pollId    String
  poll      Poll     @relation(fields: [pollId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id           String     @id @default(cuid())
  pollOptionId String
  pollOption   PollOption @relation(fields: [pollOptionId], references: [id], onDelete: Cascade)
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model PlaidItem {
  id              String         @id @default(cuid())
  accessToken     String
  itemId          String         @unique
  institutionId   String
  institutionName String
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  accounts        PlaidAccount[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model PlaidAccount {
  id               String             @id @default(cuid())
  accountId        String             @unique
  name             String
  mask             String
  type             String
  subtype          String
  balanceAvailable Float?
  balanceCurrent   Float
  isoCurrencyCode  String
  itemId           String
  item             PlaidItem          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  transactions     PlaidTransaction[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model PlaidTransaction {
  id              String       @id @default(cuid())
  transactionId   String       @unique
  amount          Float
  date            DateTime
  name            String
  merchantName    String?
  category        String[]
  location        Json?
  paymentChannel  String
  isoCurrencyCode String
  pending         Boolean
  accountId       String
  account         PlaidAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Invitation {
  id           String           @id @default(cuid())
  status       InvitationStatus @default(PENDING)
  expiresAt    DateTime
  travelId     String
  travel       Travel           @relation(fields: [travelId], references: [id], onDelete: Cascade)
  inviterId    String
  inviter      User             @relation("sentInvitations", fields: [inviterId], references: [id])
  inviteeEmail String
  inviteeId    String?
  invitee      User?            @relation("receivedInvitations", fields: [inviteeId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model Message {
  id        String   @id @default(cuid())
  text      String
  username  String
  travelId  String
  travel    Travel   @relation(fields: [travelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
